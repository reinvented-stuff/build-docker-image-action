---
# yamllint disable rule:line-length

name: Build and push Docker image
description: Builds a Docker image and pushes it into a registry


inputs:
  registry_address:
    description: 'Docker registry address'
    type: string
    required: true

  registry_username:
    description: 'Username to authorise in registry'
    type: string
    required: true

  registry_token:
    description: 'Token to authorise in registry'
    type: string
    required: true

  name:
    description: 'Name of the Docker image (incl. repository, excl. version)'
    type: string
    required: true

  build_args:
    description: 'Additional build arguments to pass to docker build command'
    type: string
    required: false
    default: ""

  planned_version:
    description: 'Version to assign to the image'
    type: string
    required: true

  default_branch:
    description: 'Default branch name that would not be added to version tag part'
    type: string
    required: false
    default: "master"

  fail_on_error:
    description: 'Fail the pipeline on error'
    type: boolean
    required: true
    default: false


outputs:
  image_full_name:
    description: "Full name of the pushed image"
    value: ${{ steps.set_docker_image_id.outputs.github_image_full_name }}


runs:
  using: "composite"
  steps:

    - name: Get trigger branch name
      id: get_branch_name
      shell: bash
      run: |
        echo "::set-output name=branch_name::${GITHUB_REF#refs/heads/}"


    - name: Login to Docker registry
      id: docker_registry_login
      shell: bash
      run: >-
        echo "${{ inputs.registry_token }}" |
        docker login
        "${{ inputs.registry_address }}"
        -u "${{ github.actor }}"
        --password-stdin


    - name: Define Docker image ID and full name
      id: set_docker_image_id
      shell: bash
      run: |
        if [[ "${{ steps.get_branch_name.outputs.branch_name }}" == "${{ inputs.default_branch }}" ]]; then
          long_suffix=""
        else
          long_suffix="${{steps.get_branch_name.outputs.branch_name}}"
        fi

        GITHUB_IMAGE_ID="$(echo "${{ inputs.name }}" | tr '[A-Z]' '[a-z]')"
        GITHUB_IMAGE_FULL_NAME="${{ inputs.registry_address }}/${GITHUB_IMAGE_ID}:${{ inputs.planned_version }}${long_suffix}"

        echo "::debug::GITHUB_IMAGE_ID: ${GITHUB_IMAGE_ID}"
        echo "::debug::GITHUB_IMAGE_FULL_NAME: ${GITHUB_IMAGE_FULL_NAME}"

        echo "::set-output name=github_image_id::${GITHUB_IMAGE_ID}"
        echo "::set-output name=github_image_full_name::${GITHUB_IMAGE_FULL_NAME}"


    - name: Render Docker build arguments
      id: set_docker_build_args
      shell: bash
      run: |
        BUILD_ARGS_COMPILED=( )

        if [[ ! -z "${{ inputs.build_args }}" ]]; then

          while read build_arg; do

            echo "Processing build_arg: '${build_arg}'"
            BUILD_ARGS_COMPILED+=( "--build_arg" "'${build_arg}'" )

          done <<< "${{ inputs.build_args }}"

        fi

        echo "::set-output name=build_args_compiled::${BUILD_ARGS_COMPILED[@]}"


    - name: Build Docker image
      id: build_docker_image
      shell: bash
      run: >
        docker build
        --tag "${{ steps.set_docker_image_id.outputs.github_image_full_name }}"
        --build-arg BUILD_VERSION="${{ inputs.planned_version }}"
        ${{ steps.set_docker_build_args.outputs.build_args_compiled }}
        --file Dockerfile
        .


    - name: Push Docker image to registry
      id: push_docker_image
      shell: bash
      run: |
        docker push "${{ steps.set_docker_image_id.outputs.github_image_full_name }}"


...
